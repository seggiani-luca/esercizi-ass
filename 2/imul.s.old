# leggere 2 numeri interi in base 10, calcolarne il prodotto, e stampare il risultato.

# lettura:
# come primo carattere leggere il segno del numero, cioè un '+' o un '-'
# segue il modulo del numero, minore di 256

# stampa:
# stampare prima il segno del numero (+ o -), poi il modulo in cifre decimali

.include "./files/utility.s"

.data

.text
_main:
	nop

primo: # leggi due numeri
	call inint
	call newline

	mov %ax, %bx
	
	call inint
	call newline

	# %bx contiene il primo numero e %ax il secondo

secondo: # moltiplica
	imul %bx
	# %dx_%ax contiene il risultato

	call outint
	call newline
	ret

# inint: prende un intero da tastiera come un segno seguito da una sequenza di cifre 
# ingresso: 
# uscita: %ax, l'intero inserito 
inint: 
	# si usa %bx come flag per i numeri negativi
	push %bx
	mov $0, %bx
	
	# mettiamo il modulo in %cx
	push %cx
	mov $0, %cx 

	mov $0, %ax
	call inchar # potrebbe essere il segno o una cifra
	
	cmp $'-', %al
	jne inloop

	mov $1, %bx

	call outchar

	mov $0, %ax
	call inchar

	cmp $'+', %al
	jne inloop

	call outchar

	mov $0, %ax
	call inchar

inloop: # cicla su tutte le cifre. si aspetta la prima cifra già in %al
	cmp $'\r', %al 
	je sgnchk

	cmp $'0', %al 
	jb instep

	cmp $'9', %al	
	ja instep

	call outchar

	sub  $'0', %al # riporta in un numero naturale (era ascii) 
	xchg %ax, %cx
	mov $10, %dl
	mul %dl
	add %cx, %ax
	xchg %ax, %cx

instep:
	mov $0, %ax
	call inchar
	jmp inloop

sgnchk:
	cmp $1, %bx
	jne postin

	not %cx
	inc %cx
	
postin:
	mov %cx, %ax
	pop %cx
	pop %bx
	ret

# outint: stampa un'intero a schermo, come un segno seguito da una sequenza di cifre
# ingressi: dx_ax, l'intero da stampare
# uscite:
outint:
	push %bx
	mov $10, %bx
	
	push %cx
	mov $0, %cx

	test %dx, %dx
	jns outloop
	
	not %dx
	not %ax

	add $1, %ax
	adc $0, %dx

	push %ax
	mov $'-', %al
	call outchar
	pop %ax

outloop:
	div %bx
	push %dx
	inc %cx

	xor %dx, %dx
	test %ax, %ax
	jnz outloop

printloop:
	pop %dx
	mov %dx, %ax
	add $'0', %al
	call outchar

	dec %cx
	test %cx, %cx
	jnz printloop

	pop %cx
	pop %bx
	ret
